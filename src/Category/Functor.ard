\import Category
\import Category.Instances
\import Equiv (Equiv, QEquiv)
\import Function.Meta
\import Logic
\open Precat
\import Paths
\import Aux.Paths
\import Paths.Meta
\import Playground
\import Set.Category
\import Set.Fin

\record Functor {X Y : \Type} (A : Precat X) (B : Precat Y) {
  | map : X -> Y
  | arrow-map {a b : X} (f : A.Hom a b) : B.Hom (map a) (map b)
  | functor-id (a : X) : arrow-map (id a) = id (map a)
  | functor-hom {a b c : X} (f : Hom a b) (g : Hom b c) : (arrow-map (g `o` f) = arrow-map g `o` arrow-map f)
}

\func EndoFunctor {X : \Type} (A : Precat X) : \Type => Functor A A

\func Id {X : \Type} (A : Precat X) : EndoFunctor A => \new Functor {
  | map => \lam x => x
  | arrow-map => \lam f => f
  | functor-id => \lam x => idp
  | functor-hom => \lam f g => idp
}

\func HomFunctor {X : \Type} (A : Precat X) (x : X) : Functor A SetCat => \new Functor {
  | map => Hom x
  | arrow-map => o
  | functor-id a => funExt (\lam _ => Hom x a) (A.o (A.id a)) (\lam x'' => x'') id-right
  | functor-hom {a} {b} {c} f g => funExt (\lam _ => Hom x c) (A.o (A.o g f)) (\lam x1 => A.o g (A.o f x1)) (\lam x1 => inv (o-assoc-rev g f x1))
}

\func EmptyFunctor (D : Precat) : Functor EmptyCat D => \new Functor {
  | map => fin0-absurd
  | arrow-map => \lam x => absurd x
  | functor-id => \lam x => fin0-absurd x
  | functor-hom => \lam x => absurd x
}

\func ConstFunctor (D : Precat) (x : D) : Functor Singular D => \new Functor {
  | map _ => x
  | arrow-map => \lam _ => id x
  | functor-id => \lam _ => idp
  | functor-hom => \lam _ _ => inv (id-left (id x))
}

\record NaturalTransformation {X Y : \Type} {A : Precat X} {B : Precat Y} (F G : Functor A B) {
  | component (x : X) : B.Hom (F.map x) (G.map x)
  | naturality {x y : X} (f : Hom x y) : component y `o` F.arrow-map f = G.arrow-map f `o` component x
}

\func NatId {X Y : Precat} (F : Functor X Y) : NaturalTransformation F F => \new NaturalTransformation {
  | component x => Y.id (F.map x)
  | naturality {x} {y} f => rewrite (id-right (F.arrow-map f)) (rewrite (id-left (F.arrow-map f)) idp)
}

\func \infix 3 _^ {A B : Precat} {F G H : Functor A B} (V : NaturalTransformation {_} {_} {A} {B} G H) (U : NaturalTransformation {_} {_} {A} {B} F G)  : NaturalTransformation F H =>
  \new NaturalTransformation {_} {_} {A} {B} F H {
    | component x => V.component x `o` U.component x
    | naturality {x} {y} f =>
      rewriteI (o-assoc-rev (V.component y) (U.component y) (F.arrow-map f)) $
      rewrite (naturality {U} f) $
      rewrite (o-assoc-rev (V.component y) (G.arrow-map f) (U.component x)) $
      rewrite (V.naturality f) $
      rewriteI (o-assoc-rev (H.arrow-map f) (V.component x) (U.component x)) idp
  }

\func o-assoc-rev {X : \Type} {C : Precat X} {a b c d : X} (h : Hom c d)  (g : Hom b c) (f : Hom a b) : h `o` (g `o` f) = (h `o` g) `o` f =>
  C.o-assoc f g h

\instance FunctorCategory {X Y : \Type} (A : Precat X) (B : Precat Y) : Precat (Functor A B)
  | Hom F G => NaturalTransformation F G
  | id (F : Functor A B) => NatId F
  | o (nat1 : NaturalTransformation) (nat2 : NaturalTransformation) => nat1 _^ nat2
  | id-left {F : Functor} {G : Functor} (f : NaturalTransformation) => path $ (\lam i => \new NaturalTransformation {
    | component x => id-left (f.component x) @ i
    | naturality {x} {y} mor =>
      coeR (\lam j => id-left (f.component y) @ j `o` F.arrow-map mor = G.arrow-map mor `o` id-left (f.component x) @ j)
           (f.naturality mor) i
  })
  | id-right {F : Functor} {G : Functor} (f : NaturalTransformation) => path (\lam i => \new NaturalTransformation {
    | component x => id-right (f.component x) @ i
    | naturality {x} {y} mor =>
      coeR (\lam j => id-right (f.component y) @ j `o` F.arrow-map mor = G.arrow-map mor `o` id-right (f.component x) @ j)
           (f.naturality mor) i
  })
  | o-assoc {F G H W : Functor A B} (nat-fg : NaturalTransformation F G) (nat-gh : NaturalTransformation G H) (nat-hw : NaturalTransformation H W) => path (\lam i => \new NaturalTransformation F W {
    | component x => B.o-assoc (nat-fg.component x) (nat-gh.component x) (nat-hw.component x) @ i
    | naturality {x} {y} f =>
      coe (\lam j => (B.o-assoc (nat-fg.component y) (nat-gh.component y) (nat-hw.component y) @ j) `o` (F.arrow-map f) = (W.arrow-map f) `o` (B.o-assoc (nat-fg.component x) (nat-gh.component x) (nat-hw.component x) @ j))
          ((nat-hw.component y `o` (nat-gh.component y `o` nat-fg.component y)) `o` F.arrow-map f ==< inv (o-assoc-rev (component y) (component y `o` component y) (F.arrow-map f))        >==
          nat-hw.component y `o` ((nat-gh.component y `o` nat-fg.component y) `o` F.arrow-map f)  ==< pmap (component y `o`) (inv (o-assoc-rev (component y) (component y) (arrow-map f))) >==
          nat-hw.component y `o` (nat-gh.component y `o` (nat-fg.component y `o` F.arrow-map f))  ==< pmap (component y `o` (component y `o` __)) (naturality f)                           >==
          nat-hw.component y `o` (nat-gh.component y `o` (G.arrow-map f `o` nat-fg.component x))  ==< pmap (component y `o`) (o-assoc-rev (component y) (G.arrow-map f) (component x))     >==
          nat-hw.component y `o` ((nat-gh.component y `o` G.arrow-map f) `o` nat-fg.component x)  ==< pmap (component y `o` (__ `o` component x)) (naturality f)                           >==
          nat-hw.component y `o` ((H.arrow-map f `o` nat-gh.component x) `o` nat-fg.component x)  ==< o-assoc-rev (component y) (H.arrow-map f `o` component x) (component x)              >==
          (nat-hw.component y `o` (H.arrow-map f `o` nat-gh.component x)) `o` nat-fg.component x  ==< pmap (`o` component x) (o-assoc-rev (component y) (H.arrow-map f) (component x))     >==
          ((nat-hw.component y `o` H.arrow-map f) `o` nat-gh.component x) `o` nat-fg.component x  ==< pmap ((__ `o` component x)`o` component x) (naturality f)                            >==
          ((W.arrow-map f `o` nat-hw.component x) `o` nat-gh.component x) `o` nat-fg.component x  ==< pmap (`o` component x) (inv (o-assoc-rev (arrow-map f) (component x) (component x))) >==
          (W.arrow-map f `o` (nat-hw.component x `o` nat-gh.component x)) `o` nat-fg.component x  ==< inv (o-assoc-rev (arrow-map f) (component x `o` component x) (component x))          >==
          W.arrow-map f `o` ((nat-hw.component x `o` nat-gh.component x) `o` nat-fg.component x)  ==< pmap (arrow-map f `o`) (inv (o-assoc-rev (component x) (component x) (component x))) >==
          W.arrow-map f `o` (nat-hw.component x `o` (nat-gh.component x `o` nat-fg.component x))  `qed)
          i
  })
