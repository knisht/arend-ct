\import Category
\import Category.Instances
\import Data.Bool
\import Equiv (Equiv, QEquiv)
\import Function.Meta
\import Logic
\open Precat
\import Paths
\import Aux.Paths
\import Paths.Meta
\import Playground
\import Set.Category
\import Set.Fin
\import Category.Natural

\record Functor {X Y : \Type} (A : Precat X) (B : Precat Y) {
  | map : X -> Y
  | arrow-map {a b : X} (f : A.Hom a b) : B.Hom (map a) (map b)
  | functor-id (a : X) : arrow-map (id a) = id (map a)
  | functor-hom {a b c : X} (f : Hom a b) (g : Hom b c) : (arrow-map (g `o` f) = arrow-map g `o` arrow-map f)
}

\func \infix 2 f-o {A B C : Precat} (G : Functor B C) (F : Functor A B) : Functor A C => \new Functor {
  | map x => G.map $ F.map x
  | arrow-map f => G.arrow-map $ F.arrow-map f
  | functor-id a => rewrite (F.functor-id a) (G.functor-id (F.map a))
  | functor-hom f g => rewrite (F.functor-hom f g) (G.functor-hom (F.arrow-map f) (F.arrow-map g))
}

-- | Corresponding functor between opposite categories
\func f-inv {A B : Precat} (F : Functor A B) : Functor (op A) (op B) => \new Functor {
  | map => F.map
  | arrow-map f => F.arrow-map f
  | functor-id => F.functor-id
  | functor-hom f g => F.functor-hom g f
}

\func EndoFunctor {X : \Type} (A : Precat X) : \Type => Functor A A

\func Id {X : \Type} (A : Precat X) : EndoFunctor A => \new Functor {
  | map => \lam x => x
  | arrow-map => \lam f => f
  | functor-id => \lam x => idp
  | functor-hom => \lam f g => idp
}

\func HomFunctor {X : \Type} (A : Precat X) (x : X) : Functor A SetCat => \new Functor {
  | map => Hom x
  | arrow-map => o
  | functor-id a => funExt (\lam _ => Hom x a) (A.o (A.id a)) (\lam x'' => x'') id-right
  | functor-hom {a} {b} {c} f g => funExt (\lam _ => Hom x c) (A.o (A.o g f)) (\lam x1 => A.o g (A.o f x1)) (\lam x1 => inv (o-assoc-rev g f x1))
}

\func EmptyFunctor (D : Precat) : Functor EmptyCat D => \new Functor {
  | map => fin0-absurd
  | arrow-map => \lam x => absurd x
  | functor-id => \lam x => fin0-absurd x
  | functor-hom => \lam x => absurd x
}

\func ConstFunctor (D : Precat) (x : D) : Functor Singular D => \new Functor {
  | map _ => x
  | arrow-map => \lam _ => id x
  | functor-id => \lam _ => idp
  | functor-hom => \lam _ _ => inv (id-left (id x))
}

\func o-assoc-rev {X : \Type} {C : Precat X} {a b c d : X} (h : Hom c d)  (g : Hom b c) (f : Hom a b) : h `o` (g `o` f) = (h `o` g) `o` f =>
  C.o-assoc f g h

{- | Category of functors between selected two categories
 -}
\instance FunctorCategory {X Y : \Type} (A : Precat X) (B : Precat Y) : Precat (Functor A B)
  | Hom F G => NaturalTransformation F G
  | id (F : Functor A B) => NatId F
  | o (nat1 : NaturalTransformation) (nat2 : NaturalTransformation) => nat1 _^ nat2
  | id-left {F : Functor} {G : Functor} (f : NaturalTransformation) => natExt (f _^ NatId F) f (\lam x => id-left (f.component x))
  | id-right {F : Functor} {G : Functor} (f : NaturalTransformation) => natExt (NatId G _^ f) f (\lam x => id-right (f.component x))
  | o-assoc (nat-fg : NaturalTransformation) (nat-gh : NaturalTransformation) (nat-hw : NaturalTransformation) =>
    natExt (nat-hw _^ (nat-gh _^ nat-fg)) ((nat-hw _^ nat-gh) _^ nat-fg) (\lam x => B.o-assoc (nat-fg.component x) (nat-gh.component x) (nat-hw.component x))
