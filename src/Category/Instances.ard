\import Category
\import Category.Functor
\import Data.Or
\import Logic
\import Paths
\import Set.Category
\import Set.Fin

\instance Singular : Cat (\Sigma)
  | Hom => \lam _ _ => \Sigma
  | id => \lam _ => ()
  | o => \lam _ _ => ()
  | id-left => \lam a => \case \elim a \with {
    | () => idp
  }
  | id-right =>  \lam a => \case \elim a \with {
    | () => idp
  }
  | o-assoc => \lam _ _ _ => idp
  | univalence => \lam {x} {y} f g p q => \case \elim x, \elim y, \elim f, \elim g \with {
    | (), (), (), () => (idp, idp)
  }

\func EmptyCat : Precat => Discrete 0

\instance Discrete (n : Nat) : Precat (Fin n) \elim n {
  | zero => \new Precat {
    | Hom a b => Empty
    | id x => \case \elim x \with { | () }
    | o a b => absurd a
    | id-left a => absurd a
    | id-right a => absurd a
    | o-assoc a => absurd a
  }
  | suc n => \new Precat {
    | Hom a b => \case \elim a, \elim b \with {
      | fzero, fzero => \Sigma
      | fzero, fsuc b => Empty
      | fsuc a, fzero => Empty
      | fsuc a, fsuc b => Hom {Discrete n} a b
    }
    | id x => \case \elim x \with {
      | fzero => ()
      | fsuc x => id x
    }
    | o {x} {y} {z} g f => \case \elim x, \elim y, \elim z, \elim g, \elim f \with {
      | fzero, fzero, fzero, g, f => ()
      | fzero, fsuc y, fzero, f, ()
      | fsuc x, fzero, fzero, g, ()
      | fsuc x, fsuc y, fsuc z, g, f => g `o` f
    }
    | id-left {x} {y} f => \case \elim x, \elim y, \elim f \with {
      | fzero, fzero, f => idp
      | fsuc x, fsuc y, f => id-left f
    }
    | id-right {x} {y} f => \case \elim x, \elim y, \elim f \with {
      | fzero, fzero, f => idp
      | fsuc x, fsuc y, f => id-right f
    }
    | o-assoc {x} {y} {z} {w} h g f => \case \elim x, \elim y, \elim z, \elim w, \elim f, \elim g, \elim h \with {
      | fzero, fzero, fzero, fzero, f, g, h => idp
      | fzero, fzero, fsuc z, fzero, (), g, h
      | fzero, fsuc y, fzero, fzero, f, h, ()
      | fzero, fsuc y, fsuc z, fzero, h, g, ()
      | fsuc x, fzero, fzero, fzero, f, g, ()
      | fsuc x, fzero, fsuc z, fzero, h, g, ()
      | fsuc x, fsuc y, fzero, fzero, f, (), h
      | fsuc x, fsuc y, fsuc z, fsuc w, f, g, h => o-assoc h g f
    }
  }
}
